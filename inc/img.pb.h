// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: img.proto

#ifndef PROTOBUF_img_2eproto__INCLUDED
#define PROTOBUF_img_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_img_2eproto();
void protobuf_AssignDesc_img_2eproto();
void protobuf_ShutdownFile_img_2eproto();

class Img;
class Action;
class Experiment;

// ===================================================================

class Img : public ::google::protobuf::Message {
 public:
  Img();
  virtual ~Img();

  Img(const Img& from);

  inline Img& operator=(const Img& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Img& default_instance();

  void Swap(Img* other);

  // implements Message ----------------------------------------------

  Img* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Img& from);
  void MergeFrom(const Img& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline ::google::protobuf::uint32 w() const;
  inline void set_w(::google::protobuf::uint32 value);

  // required uint32 h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline ::google::protobuf::uint32 h() const;
  inline void set_h(::google::protobuf::uint32 value);

  // required uint32 c = 3;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline ::google::protobuf::uint32 c() const;
  inline void set_c(::google::protobuf::uint32 value);

  // required float time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline float time() const;
  inline void set_time(float value);

  // required float clocktime = 5;
  inline bool has_clocktime() const;
  inline void clear_clocktime();
  static const int kClocktimeFieldNumber = 5;
  inline float clocktime() const;
  inline void set_clocktime(float value);

  // repeated float data = 6 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Img)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_clocktime();
  inline void clear_has_clocktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 w_;
  ::google::protobuf::uint32 h_;
  ::google::protobuf::uint32 c_;
  float time_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  float clocktime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_img_2eproto();
  friend void protobuf_AssignDesc_img_2eproto();
  friend void protobuf_ShutdownFile_img_2eproto();

  void InitAsDefaultInstance();
  static Img* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline float time() const;
  inline void set_time(float value);

  // repeated float x = 2 [packed = true];
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x(int index) const;
  inline void set_x(int index, float value);
  inline void add_x(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      x() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_x();

  // repeated float q = 3 [packed = true];
  inline int q_size() const;
  inline void clear_q();
  static const int kQFieldNumber = 3;
  inline float q(int index) const;
  inline void set_q(int index, float value);
  inline void add_q(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      q() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_q();

  // repeated float a = 4 [packed = true];
  inline int a_size() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline float a(int index) const;
  inline void set_a(int index, float value);
  inline void add_a(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      a() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_a();

  // @@protoc_insertion_point(class_scope:Action)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > q_;
  mutable int _q_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > a_;
  mutable int _a_cached_byte_size_;
  float time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_img_2eproto();
  friend void protobuf_AssignDesc_img_2eproto();
  friend void protobuf_ShutdownFile_img_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Experiment : public ::google::protobuf::Message {
 public:
  Experiment();
  virtual ~Experiment();

  Experiment(const Experiment& from);

  inline Experiment& operator=(const Experiment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Experiment& default_instance();

  void Swap(Experiment* other);

  // implements Message ----------------------------------------------

  Experiment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Experiment& from);
  void MergeFrom(const Experiment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required string map_file = 3;
  inline bool has_map_file() const;
  inline void clear_map_file();
  static const int kMapFileFieldNumber = 3;
  inline const ::std::string& map_file() const;
  inline void set_map_file(const ::std::string& value);
  inline void set_map_file(const char* value);
  inline void set_map_file(const char* value, size_t size);
  inline ::std::string* mutable_map_file();
  inline ::std::string* release_map_file();
  inline void set_allocated_map_file(::std::string* map_file);

  // @@protoc_insertion_point(class_scope:Experiment)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_map_file();
  inline void clear_has_map_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* description_;
  ::std::string* map_file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_img_2eproto();
  friend void protobuf_AssignDesc_img_2eproto();
  friend void protobuf_ShutdownFile_img_2eproto();

  void InitAsDefaultInstance();
  static Experiment* default_instance_;
};
// ===================================================================


// ===================================================================

// Img

// required uint32 w = 1;
inline bool Img::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Img::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Img::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Img::clear_w() {
  w_ = 0u;
  clear_has_w();
}
inline ::google::protobuf::uint32 Img::w() const {
  return w_;
}
inline void Img::set_w(::google::protobuf::uint32 value) {
  set_has_w();
  w_ = value;
}

// required uint32 h = 2;
inline bool Img::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Img::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Img::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Img::clear_h() {
  h_ = 0u;
  clear_has_h();
}
inline ::google::protobuf::uint32 Img::h() const {
  return h_;
}
inline void Img::set_h(::google::protobuf::uint32 value) {
  set_has_h();
  h_ = value;
}

// required uint32 c = 3;
inline bool Img::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Img::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Img::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Img::clear_c() {
  c_ = 0u;
  clear_has_c();
}
inline ::google::protobuf::uint32 Img::c() const {
  return c_;
}
inline void Img::set_c(::google::protobuf::uint32 value) {
  set_has_c();
  c_ = value;
}

// required float time = 4;
inline bool Img::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Img::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Img::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Img::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float Img::time() const {
  return time_;
}
inline void Img::set_time(float value) {
  set_has_time();
  time_ = value;
}

// required float clocktime = 5;
inline bool Img::has_clocktime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Img::set_has_clocktime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Img::clear_has_clocktime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Img::clear_clocktime() {
  clocktime_ = 0;
  clear_has_clocktime();
}
inline float Img::clocktime() const {
  return clocktime_;
}
inline void Img::set_clocktime(float value) {
  set_has_clocktime();
  clocktime_ = value;
}

// repeated float data = 6 [packed = true];
inline int Img::data_size() const {
  return data_.size();
}
inline void Img::clear_data() {
  data_.Clear();
}
inline float Img::data(int index) const {
  return data_.Get(index);
}
inline void Img::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void Img::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Img::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
Img::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Action

// required float time = 1;
inline bool Action::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float Action::time() const {
  return time_;
}
inline void Action::set_time(float value) {
  set_has_time();
  time_ = value;
}

// repeated float x = 2 [packed = true];
inline int Action::x_size() const {
  return x_.size();
}
inline void Action::clear_x() {
  x_.Clear();
}
inline float Action::x(int index) const {
  return x_.Get(index);
}
inline void Action::set_x(int index, float value) {
  x_.Set(index, value);
}
inline void Action::add_x(float value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Action::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
Action::mutable_x() {
  return &x_;
}

// repeated float q = 3 [packed = true];
inline int Action::q_size() const {
  return q_.size();
}
inline void Action::clear_q() {
  q_.Clear();
}
inline float Action::q(int index) const {
  return q_.Get(index);
}
inline void Action::set_q(int index, float value) {
  q_.Set(index, value);
}
inline void Action::add_q(float value) {
  q_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Action::q() const {
  return q_;
}
inline ::google::protobuf::RepeatedField< float >*
Action::mutable_q() {
  return &q_;
}

// repeated float a = 4 [packed = true];
inline int Action::a_size() const {
  return a_.size();
}
inline void Action::clear_a() {
  a_.Clear();
}
inline float Action::a(int index) const {
  return a_.Get(index);
}
inline void Action::set_a(int index, float value) {
  a_.Set(index, value);
}
inline void Action::add_a(float value) {
  a_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Action::a() const {
  return a_;
}
inline ::google::protobuf::RepeatedField< float >*
Action::mutable_a() {
  return &a_;
}

// -------------------------------------------------------------------

// Experiment

// required string name = 1;
inline bool Experiment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Experiment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Experiment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Experiment::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Experiment::name() const {
  return *name_;
}
inline void Experiment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Experiment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Experiment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Experiment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Experiment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Experiment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string description = 2;
inline bool Experiment::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Experiment::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Experiment::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Experiment::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Experiment::description() const {
  return *description_;
}
inline void Experiment::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Experiment::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Experiment::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Experiment::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Experiment::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Experiment::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string map_file = 3;
inline bool Experiment::has_map_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Experiment::set_has_map_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Experiment::clear_has_map_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Experiment::clear_map_file() {
  if (map_file_ != &::google::protobuf::internal::kEmptyString) {
    map_file_->clear();
  }
  clear_has_map_file();
}
inline const ::std::string& Experiment::map_file() const {
  return *map_file_;
}
inline void Experiment::set_map_file(const ::std::string& value) {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  map_file_->assign(value);
}
inline void Experiment::set_map_file(const char* value) {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  map_file_->assign(value);
}
inline void Experiment::set_map_file(const char* value, size_t size) {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  map_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Experiment::mutable_map_file() {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  return map_file_;
}
inline ::std::string* Experiment::release_map_file() {
  clear_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = map_file_;
    map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Experiment::set_allocated_map_file(::std::string* map_file) {
  if (map_file_ != &::google::protobuf::internal::kEmptyString) {
    delete map_file_;
  }
  if (map_file) {
    set_has_map_file();
    map_file_ = map_file;
  } else {
    clear_has_map_file();
    map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_img_2eproto__INCLUDED
